#!/usr/bin/python

rrdtool_graph_pat = "autoclave-logger.%s.png" # Fill with period, e.g. 'daily'
rrdtool_period = 6 # Seconds between updates
status_interval = 60 # Seconds between status updates
loop_interval = 1 # Seconds per loop

import rrdtool, hal, time, sys, os, datetime
from autoclave import Config, Messages

# Set up component
h = hal.component("autoclave-logger")

# Inputs:
# - Process settings and outputs
h.newpin("stage", hal.HAL_S32, hal.HAL_IN)
h.newpin("temp-set", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("burner-duty", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("valve-on", hal.HAL_BIT, hal.HAL_IN)
# - Temperatures and pressure
h.newpin("temp-burner", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("temp-pot", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("pressure", hal.HAL_FLOAT, hal.HAL_IN)
# - Controls
h.newpin("estop", hal.HAL_BIT, hal.HAL_IN)
h.newpin("error", hal.HAL_BIT, hal.HAL_IN)
h.newpin("enable", hal.HAL_BIT, hal.HAL_IN)
h.newpin("shutdown", hal.HAL_BIT, hal.HAL_IN)

msg = Messages('Autoclave logger')
config = Config()
rrd_dir = os.path.dirname(config.rrd_file)
rrd_image_dir = config.rrd_image_dir
if not os.path.isdir(rrd_dir):
    os.mkdir(rrd_dir)
if not os.path.isdir(rrd_image_dir):
    os.mkdir(rrd_image_dir)
msg.info("Changing to RRD directory '%s'" % rrd_dir)
os.chdir(rrd_dir)
rrdtool_db = os.path.basename(config.rrd_file)
msg.info("RRD file '%s'" % rrdtool_db)

# RRD archive parameters
archives = dict(
    # hourly:  6s samples for 2d = 28800
    hourly = dict(steps = "%ds" % rrdtool_period, rows = "2d"),
    # daily:  1.5m samples for 30d = 28800
    daily  = dict(steps = "%ds" % (rrdtool_period*15), rows = "30d"),
    # weekly: 20m samples for 1y = 29200
    weekly = dict(steps = "%ds" % (rrdtool_period*60*3), rows = "1y"),
)

# Init rrdtool database
# https://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html
if not os.path.exists(rrdtool_db):
    msg.info("Creating RRD database in %s" % rrdtool_db)
    args = [
        rrdtool_db,
        "--start=0",
        "--step=%s" % rrdtool_period,
        "--no-overwrite", # Don't clobber existing file
        "DS:stage:GAUGE:%d:U:U" % (rrdtool_period*2),
        "DS:set:GAUGE:%d:U:U" % (rrdtool_period*2),
        "DS:temp:GAUGE:%d:U:U" % (rrdtool_period*2),
        "DS:pres:GAUGE:%d:U:U" % (rrdtool_period*2),
        "DS:duty:GAUGE:%d:U:U" % (rrdtool_period*2),
        "DS:btemp:GAUGE:%d:U:U" % (rrdtool_period*2),
        "DS:valve:GAUGE:%d:U:U" % (rrdtool_period*2),
        "DS:estop:GAUGE:%d:U:U" % (rrdtool_period*2),
        "DS:error:GAUGE:%d:U:U" % (rrdtool_period*2),
        "DS:disable:GAUGE:%d:U:U" % (rrdtool_period*2)] + \
        [("RRA:AVERAGE:0.5:%(steps)s:%(rows)s" % i) for i in archives.values() ]
    # for i in args:
    #     msg.info("Create arg:  %s" % i)
    rrdtool.create( *args )

# Init vars
estop = error = disable = valve_on = 0
last_sample = time.time()
sample_periods = 0
start_time = time.time()

# Mark the component as 'ready'
msg.info("Initialized")
h.ready()

def loop():
    time.sleep(loop_interval)

    # Use globals to maintain state
    # - Cumulative
    global estop
    global error
    global disable
    global valve_on
    # - Instantaneous
    global last_sample
    global sample_periods

    # Take one sample for consistency
    # - Settings
    stage = h['stage']
    temp_set = h['temp-set']
    # - Readings
    temp_pot = h['temp-pot']
    pressure = h['pressure']
    valve_on += h['valve-on']
    burner_duty = h['burner-duty']
    temp_burner = h['temp-burner']
    # - Status/controls
    estop+= h['estop']
    error+= h['error']
    disable += 1 - h['enable']
    shutdown = h['shutdown']

    # Exit
    if shutdown:
        msg.info("Got shutdown signal = %s" % shutdown)
        return False

    # Log
    now = time.time()
    if (now - last_sample) > rrdtool_period and sample_periods > 1:
        # Time for new sample
        # - Update RRD database
        u1 = '--template=stage:set:temp:pres:duty:btemp:valve:estop:error:disable'
        u2 = 'N:%d:%.1f:%.1f:%.1f:%.2f:%.2f:%.1f:%.2f:%.2f:%.2f' % tuple(
            [max (j,0) for j in # Sometimes random values on stop/start
             # Temperatures
             [stage, temp_set, temp_pot, pressure, burner_duty, temp_burner] +
             # Cumulative vars scaled to percentages
             [float(i)/sample_periods for i in (
                 valve_on, estop, error, disable)]])
        #msg.info("u1: %s" % u1) # Debugging
        #msg.info("u2: %s" % u2)
        rrdtool.update(rrdtool_db, u1, u2)
        # - Build new graphs
        for sched, params in archives.items():
            period = sched[0]
            # graph(): https://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html
            rrdtool_graph = os.path.join(
                rrd_image_dir, rrdtool_graph_pat % sched)
            rrdtool.graph(
                rrdtool_graph,
                "--start=-2%s" % period,
                "--title=%s" % sched,
                "--vertical-label=Deg. C, PSIG",
                # "--width=1000", "--height=500",
                "--width=600", "--height=300",
                "--color=CANVAS#8080ff", # light blue
                "--upper-limit=150", "--lower-limit=0", "--rigid",
                "TEXTALIGN:left",

                # Define the curve values and render them
                # https://oss.oetiker.ch/rrdtool/doc/rrdgraph_data.en.html
                # https://oss.oetiker.ch/rrdtool/doc/rrdgraph_graph.en.html

                # Binary statuses stacked in background; scaled to ~150 deg.
                "COMMENT:Status (background)\:",
	        # - Disable: black area
	        "DEF:disable=%s:disable:AVERAGE" % (rrdtool_db),
	        "CDEF:disable-curve=disable,0.01,GT,146,UNKN,IF",
                "LINE10:disable-curve#000000:Disabled",
	        # - Error:  orange area
	        "DEF:error=%s:error:AVERAGE" % (rrdtool_db),
	        "CDEF:error-curve=error,0.01,GT,144,UNKN,IF",
                "AREA:error-curve#ff8000:Error",
                # - Estop:  yellow area
	        "DEF:estop=%s:estop:AVERAGE" % (rrdtool_db),
	        "CDEF:estop-curve=estop,0.01,GT,142,UNKN,IF",
                "AREA:estop-curve#ffff00:Estop\n",

                # Sampled data in foreground
                "COMMENT:Curves\:",
                # - Measured temp: red area
                "DEF:temp=%s:temp:AVERAGE" % (rrdtool_db),
	        "AREA:temp#ff0000:Temperature",
                # - Valve-on: blue curve following temp
	        "DEF:valve=%s:valve:AVERAGE" % (rrdtool_db),
	        "CDEF:valve-curve=valve,0.01,GT,temp,UNKN,IF",
                "LINE4:valve-curve#0000ff:Valve on",
                # - Pressure: orange curve; raise to 100+
                "DEF:pres=%s:pres:AVERAGE" % (rrdtool_db),
	        "CDEF:pres-curve=pres,0.2,GT,pres,100,+,UNKN,IF",
	        "LINE3:pres-curve#ff8000:Pressure",
                # - Set temp:  dark grey curve
                "DEF:set=%s:set:AVERAGE" % (rrdtool_db),
                "AREA:set#00000040:Set temp",
	        # - Burner temp:  dashed orange curve
                "DEF:btemp=%s:btemp:AVERAGE" % (rrdtool_db),
	        "LINE2:btemp#ff8000:dashes:Burner temp",
                # - Stage:  ticks for changes
                "DEF:stage=%s:stage:AVERAGE" % (rrdtool_db),
                "CDEF:stage-ticks=stage,PREV(stage),-,ABS,0.5,GT",
                "TICK:stage-ticks#000000:1",
            )
        #msg.info("Updated RRD DB %s" % rrdtool_db)
        # - Reset state for next sample
        last_sample = now
        sample_periods = 0
        disable = error = estop = valve_on = 0

    if (now - start_time) % status_interval < loop_interval:
        msg.info("ping")

    sample_periods += 1

    return True

try:
    while loop():
        continue
    msg.info("Loop ended")
except KeyboardInterrupt:
    msg.info("received KeyboardInterrupt")
except Exception as e:
    msg.error("Unknown exception:  %s" % e)
finally:
    msg.info("Exiting")
    sys.exit(0)
