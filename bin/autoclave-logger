#!/usr/bin/python

rrdtool_graph_pat = "autoclave-logger.%s.png" # Fill with period, e.g. 'daily'
rrdtool_period = 6 # Seconds between updates
status_interval = 60 # Seconds between status updates
loop_interval = 1 # Seconds per loop

import rrdtool, hal, time, sys, os, datetime
from autoclave import Config, Messages


# Pin creation data
# (name, ds_name, hal_type)
pin_data = [
    # Process stage settings and status
    # - Current stage ID
    ('stage',		'stage',	hal.HAL_S32),
    # Controls out
    ('temp-set',	'set',          hal.HAL_FLOAT),
    ('burner-duty',	'duty',         hal.HAL_FLOAT),
    ('valve-on',	'valve',	hal.HAL_BIT),
    # Sensors in/limits out
    ('temperature',	'temp',         hal.HAL_FLOAT),
    ('temp-burner',	'btemp',	hal.HAL_FLOAT),
    ('temp-pot',	'ptemp',	hal.HAL_FLOAT),
    ('pressure',	'pres', 	hal.HAL_FLOAT),
    # Other status
    ('estop',		'estop',	hal.HAL_BIT),
    ('error',		'error',	hal.HAL_BIT),
    ('enable',		'enable',	hal.HAL_BIT),
    # Debugging
    ('burner-p',	'burnp',	hal.HAL_FLOAT),
    ('burner-i',	'burni',	hal.HAL_FLOAT),
    ('burner-d',	'burnd',	hal.HAL_FLOAT),
    # Shutdown
    ('shutdown',	None,           hal.HAL_BIT),
]

# Set up component and pins
h = hal.component("autoclave-logger")
for name, ds_name, hal_type in pin_data:
    h.newpin(name, hal_type, hal.HAL_IN)

msg = Messages('Autoclave logger')
config = Config()
rrd_dir = os.path.dirname(config.rrd_file)
rrd_image_dir = config.rrd_image_dir
if not os.path.isdir(rrd_dir):
    os.mkdir(rrd_dir)
if not os.path.isdir(rrd_image_dir):
    os.mkdir(rrd_image_dir)
msg.info("Changing to RRD directory '%s'" % rrd_dir)
os.chdir(rrd_dir)
rrdtool_db = os.path.basename(config.rrd_file)
msg.info("RRD file '%s'" % rrdtool_db)

# RRD archive parameters
archives = dict(
    # hourly:  6s samples for 2d = 28800
    hourly = dict(steps = "%ds" % rrdtool_period, rows = "2d"),
    # daily:  1.5m samples for 30d = 28800
    daily  = dict(steps = "%ds" % (rrdtool_period*15), rows = "30d"),
    # weekly: 20m samples for 1y = 29200
    weekly = dict(steps = "%ds" % (rrdtool_period*60*3), rows = "1y"),
)

# Init rrdtool database
# https://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html
if not os.path.exists(rrdtool_db):
    msg.info("Creating RRD database in %s" % rrdtool_db)
    args = [
        rrdtool_db,
        "--start=0",
        "--step=%s" % rrdtool_period,
        "--no-overwrite", # Don't clobber existing file
        ]
    for (name, ds_name, hal_type) in pin_data:
        if ds_name is None:  continue
        args.append("DS:%s:GAUGE:%d:U:U" % (ds_name, rrdtool_period*2))
    args += [("RRA:AVERAGE:0.5:%(steps)s:%(rows)s" % i)
             for i in archives.values() ]
    # for i in args:
    #     msg.info("Create arg:  %s" % i)
    rrdtool.create( *args )

# Init vars
last_sample = time.time()
sample_periods = 0
start_time = time.time()
graph_height = 170

# Mark the component as 'ready'
msg.info("Initialized")
h.ready()

pid_curve_height = 60
pid_curve_mult = 5
def pid_curve_func(name):
    res = "CDEF:%s-curve=" % name
    # if name < 0 then (a) else (b)
    res += "%s,0,LT,%%s,%%s,IF" % name
    res %= (
        # (a): -ln(-name+1)
        "-1,%s,*,1,+,LOG,-1,*" % name,
        # (b): ln(name+1)
        "%s,1,+,LOG" % name,
    )
    # ... * multiplier + offset
    res += ",%d,*,%d,+" % (pid_curve_mult, pid_curve_height)
    return res

def loop():
    time.sleep(loop_interval)

    # Use globals to maintain state
    global last_sample
    global sample_periods

    # Exit
    if h['shutdown']:
        msg.info("Got shutdown signal")
        return False

    # Log
    now = time.time()
    if (now - last_sample) > rrdtool_period and sample_periods > 1:
        # Time for new sample
        # - Update RRD database
        u1 = '--template=' + ':'.join([i[1] for i in pin_data if i[1]])
        u2 = 'N' # now
        for name, ds_name, hal_type in pin_data:
            if ds_name is None:  continue
            if hal_type == hal.HAL_S32:
                u2 += ':%d' % (h[name])
            elif hal_type == hal.HAL_BIT:
                u2 += ':%.2f' % float(h[name])
            else:
                u2 += ":%.2f" % (h[name])
        # msg.info("u1: %s" % u1) # Debugging
        # msg.info("u2: %s" % u2)
        rrdtool.update(rrdtool_db, u1, u2)
        # - Build new graphs
        for sched, params in archives.items():
            period = sched[0]
            # graph(): https://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html
            rrdtool_graph = os.path.join(
                rrd_image_dir, rrdtool_graph_pat % sched)
            rrdtool.graph(
                rrdtool_graph,
                "--start=-2%s" % period,
                "--title=%s" % sched,
                "--vertical-label=Deg. C, PSIG",
                "--width=1000", "--height=500",
                #"--width=600", "--height=300",
                "--color=CANVAS#8080ff", # light blue
                "--upper-limit=%d" % graph_height, "--lower-limit=0", "--rigid",

                # Define the curve values and render them
                # https://oss.oetiker.ch/rrdtool/doc/rrdgraph_data.en.html
                # https://oss.oetiker.ch/rrdtool/doc/rrdgraph_graph.en.html

                # Binary statuses stacked in background; scaled to ~170 deg.
                "TEXTALIGN:left",
                "COMMENT:Status (background)\:",
	        # - Disable: black area
	        "DEF:enable=%s:enable:AVERAGE" % (rrdtool_db),
	        "CDEF:disable-curve=enable,0.99,LT,%d,UNKN,IF" % graph_height,
                "AREA:disable-curve#000000:Disabled",
	        # - Error:  orange area
	        "DEF:error=%s:error:AVERAGE" % (rrdtool_db),
	        "CDEF:error-curve=error,0.01,GT,%d,UNKN,IF" % graph_height,
                "AREA:error-curve#ff8000:Error",
                # - Estop:  yellow area
	        "DEF:estop=%s:estop:AVERAGE" % (rrdtool_db),
	        "CDEF:estop-curve=estop,0.01,GT,%d,UNKN,IF" % graph_height,
                "AREA:estop-curve#ffff00:Estop\\n",

                # Sampled data in foreground
                "TEXTALIGN:left",
                "COMMENT:Curves\:",
                # - Measured temp: red area
                "DEF:temp=%s:temp:AVERAGE" % (rrdtool_db),
	        "AREA:temp#ff0000:Temperature (blended)",
                # - Valve-on: blue curve following temp
	        "DEF:valve=%s:valve:AVERAGE" % (rrdtool_db),
	        "CDEF:valve-curve=valve,0.01,GT,temp,UNKN,IF",
                "LINE4:valve-curve#0000ff:Valve on",
                # - Pressure: orange curve; raise to 100+
                "DEF:pres=%s:pres:AVERAGE" % (rrdtool_db),
	        "CDEF:pres-curve=pres,0.2,GT,pres,100,+,UNKN,IF",
	        "LINE3:pres-curve#ff8000:Pressure",
                # - Set temp:  dark grey area
                "DEF:set=%s:set:AVERAGE" % (rrdtool_db),
                "AREA:set#00000040:Set temp",
	        # - Burner temp:  dashed orange curve
                "DEF:btemp=%s:btemp:AVERAGE" % (rrdtool_db),
	        "LINE2:btemp#ff8000:dashes:Burner temp",
                # - Pot thermistor temp: translucent grey curve
                "DEF:ptemp=%s:ptemp:AVERAGE" % (rrdtool_db),
	        "LINE2:ptemp#00000080:Pot temp",
                # - Burner duty:  thin green curve
                "DEF:duty=%s:duty:AVERAGE" % (rrdtool_db),
                "CDEF:duty-curve=duty,10,*,100,+",
                "LINE1:duty-curve#00ff00:Duty",
                # - Stage:  ticks for changes
                "DEF:stage=%s:stage:AVERAGE" % (rrdtool_db),
                "CDEF:stage-ticks=stage,PREV(stage),-,ABS,0.5,GT",
                "TICK:stage-ticks#000000:1",
                # PID components
                # - Burner P:  blue
                "DEF:burnp=%s:burnp:AVERAGE" % (rrdtool_db),
                pid_curve_func('burnp'),
                "LINE1:burnp-curve#0000ff:burner-p",
                # - Burner I:  grey
                "DEF:burni=%s:burni:AVERAGE" % (rrdtool_db),
                pid_curve_func('burni'),
                "LINE1:burni-curve#a0a0a0:burner-i",
                # - Burner D:  green
                "DEF:burnd=%s:burnd:AVERAGE" % (rrdtool_db),
                pid_curve_func('burnd'),
                "LINE1:burnd-curve#ff0000:burner-d",
                # - PID center: black
                "HRULE:%d#000000" % pid_curve_height,
            )
        #msg.info("Updated RRD DB %s" % rrdtool_db)
        # - Reset state for next sample
        last_sample = now
        sample_periods = 0

    if (now - start_time) % status_interval < loop_interval:
        msg.info("ping")

    sample_periods += 1

    return True

try:
    while loop():
        continue
    msg.info("Loop ended")
except KeyboardInterrupt:
    msg.info("received KeyboardInterrupt")
except Exception as e:
    msg.error("Unknown exception:  %s" % e)
finally:
    msg.info("Exiting")
    sys.exit(0)
