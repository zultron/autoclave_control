#!/usr/bin/python

import hal, time, sys, traceback
from autoclave import Config, Messages

##################################################################
# Control data

# Difference between temp set and sensed value to progress to next
# stage
set_sense_delta = 0.1 # deg. C
# Time increment per update
time_incr = 0.1 # seconds
# How many seconds between status updates
status_interval = 60.0 # seconds
# How many seconds between updating saved state
save_interval = 60.0 # seconds

# Map stage name to ID and back
stage_name_id_map = dict(
    idle = 0, boil = 1, flush = 2, heat = 3, ster = 4, cool = 5)
stage_id_name_map = dict(zip(
    stage_name_id_map.values(), stage_name_id_map.keys()))
timed_stages = ('flush', 'ster')
valve_on_stages = ('flush')
max_burner_stages = ('boil', 'flush') # Need PWM at 100% thru to heat
min_burner_stages = ('cool')  # Need PWM at 0% from cool

# Pin creation data
# (name, hal_type, hal_dir, save)
pin_data = [
    # Remote controls
    ('enable-switch',		hal.HAL_BIT,	hal.HAL_IN,	False),
    ('start',			hal.HAL_BIT,	hal.HAL_IN,	False),
    # Process stage settings and status
    # - Current stage ID
    ('stage',			hal.HAL_S32,	hal.HAL_OUT,	False),
    # - Idle stage:  heat
    ('idle-temp-set',		hal.HAL_FLOAT,	hal.HAL_IN,	True),
    ('idle-temp',		hal.HAL_FLOAT,	hal.HAL_OUT,	False),
    ('idle-time',		hal.HAL_S32,	hal.HAL_OUT,	False),
    # - Boil stage:  heat
    ('boil-temp-set',		hal.HAL_FLOAT,	hal.HAL_IN,	True),
    ('boil-temp',		hal.HAL_FLOAT,	hal.HAL_OUT,	False),
    ('boil-time',		hal.HAL_S32,	hal.HAL_OUT,	False),
    # - Flush stage: timer
    ('flush-time-set',		hal.HAL_S32,	hal.HAL_IN,	True),
    ('flush-time',		hal.HAL_S32,	hal.HAL_OUT,	False),
    # - Heat
    ('heat-temp-set',		hal.HAL_FLOAT,	hal.HAL_IN,	True),
    ('heat-temp',		hal.HAL_FLOAT,	hal.HAL_OUT,	False),
    ('heat-time',		hal.HAL_S32,	hal.HAL_OUT,	False),
    # - Sterilize
    ('ster-time-set',		hal.HAL_S32,	hal.HAL_IN,	True),
    ('ster-time',		hal.HAL_S32,	hal.HAL_OUT,	False),
    # - Cool
    ('cool-temp-set',		hal.HAL_FLOAT,	hal.HAL_IN,	True),
    ('cool-temp',		hal.HAL_FLOAT,	hal.HAL_OUT,	False),
    ('cool-time',		hal.HAL_S32,	hal.HAL_OUT,	False),
    # Controls out
    ('temp-set',		hal.HAL_FLOAT,	hal.HAL_OUT,	False),
    ('burner-override',         hal.HAL_FLOAT,  hal.HAL_OUT,    False),
    ('valve-on',		hal.HAL_BIT,	hal.HAL_OUT,	False),
    # Sensors in/limits out
    ('pressure',		hal.HAL_FLOAT,	hal.HAL_IN,	False),
    ('pressure-max',		hal.HAL_FLOAT,	hal.HAL_OUT,	True),
    ('pressure-bias',		hal.HAL_FLOAT,	hal.HAL_OUT,	True),
    ('pressure-gain',		hal.HAL_FLOAT,	hal.HAL_OUT,	True),
    ('temp-pot',		hal.HAL_FLOAT,	hal.HAL_IN,	False),
    ('temp-pot-max',		hal.HAL_FLOAT,	hal.HAL_OUT,	True),
    ('temp-pot-bias',		hal.HAL_FLOAT,	hal.HAL_OUT,	True),
    ('temp-pot-gain',		hal.HAL_FLOAT,	hal.HAL_OUT,	True),
    ('temp-burner',		hal.HAL_FLOAT,	hal.HAL_IN,	False),
    ('temp-burner-max',		hal.HAL_FLOAT,	hal.HAL_OUT,	True),
    ('temp-burner-bias',	hal.HAL_FLOAT,	hal.HAL_OUT,	True),
    ('temp-burner-gain',	hal.HAL_FLOAT,	hal.HAL_OUT,	True),
    # Other status
    ('time-elapsed',		hal.HAL_S32,	hal.HAL_OUT,	False),
    ('enable',			hal.HAL_BIT,	hal.HAL_IN,	False),
    ('error',			hal.HAL_BIT,	hal.HAL_OUT,	False),
    ('estop',			hal.HAL_BIT,	hal.HAL_IN,	False),
    ('shutdown',		hal.HAL_BIT,	hal.HAL_IN,	False),
]

##################################################################
# Functions

def current_stage():
    return stage_id_name_map[h['stage']]

def stage_time_elapsed():
    s = current_stage()
    if s not in timed_stages:
        return False # Not a timed stage
    now = time.time()
    return (h['%s-time' % s]) >= h['%s-time-set' % s]
        
def stage_temp_reached():
    s = current_stage()
    if s in timed_stages:
        return False # Not a temp stage
    # msg.info("stage %s:  temp-pot %.1f; %s-temp-set %.1f" %
    #          (s, h['temp-pot'], s, h['%s-temp-set' % s]))
    return abs(h['%s-temp-set' % s] - h['temp-pot']) <= set_sense_delta

def enter_stage(stage_name, init=False):
    now = time.time()
    stage_id = stage_name_id_map.get(stage_name)

    if init:
        msg.info("Initializing control")
        state['time-elapsed-start'] = now
    else:
        # Finalize previous stage
        name = current_stage()
        t = h['%s-time' % name] = (now - state.get('%s-time-start' % name,now))
        msg.info("Exiting '%s' (%d) stage after %d seconds" % (
            name, h['stage'], t))

        # If entering idle stage, finalize previous process
        if stage_name == 'idle':
            etime = now - state.get('time-elapsed-start', now)
            h['time-elapsed'] = 0
            state['time-elapsed-start'] = now
            h['start'] = False
            msg.info("Process ended; total elapsed time %d seconds" % etime)

    # If entering first stage, initialize new process
    if stage_id == 1:
        h['time-elapsed'] = 0
        state['time-elapsed-start'] = now
        msg.info("Starting process")

    # Override burner PID output for some stages
    if stage_name in max_burner_stages:
        h['burner-override'] = 2.0
    elif stage_name in min_burner_stages:
        h['burner-override'] = -2.0
    else:
        h['burner-override'] = 0.0

    if stage_name in timed_stages:
        set_time = h['%s-time-set' % stage_name]
        msg.info("Entering '%s' (%d) stage for %d seconds at temperature %.1f"
                 % (stage_name, stage_id, set_time, h['temp-set']))
    else:
        msg.info("Entering '%s' (%d) stage; set temperature %.1f"
                 % (stage_name, stage_id, h['%s-temp-set' % stage_name]))

    # Set stage ID pin
    h['stage'] = stage_id
    # Reset stage timer
    h['%s-time' % stage_name] = 0
    state['%s-time-start' % stage_name] = now
    # Set valve
    if stage_name in valve_on_stages:
        h['valve-on'] = True
        msg.info("Turned valve on")
    else:
        if h['valve-on']:
            h['valve-on'] = False
            msg.info("Turned valve off")
    return True

# Main loop function

def loop():
    time.sleep(time_incr)
    state['elapsed'] = state.get('elapsed',0.0) + time_incr
    
    now = time.time()
    if state['elapsed'] % status_interval < time_incr:
        msg.info("Status:  %s %s/%s; stage time %.1f; temp %.1f (burner %.1f)" % (
            current_stage(),
            'enabled' if h['enable'] else 'disabled',
            'started' if h['start'] else 'stopped',
            h['%s-time' % current_stage()],
            h['temp-pot'], h['temp-burner']))

    # Save settings
    if state['elapsed'] % save_interval < time_incr:
        config.write_state(h, [d[0] for d in pin_data if d[3]])

    # Exit
    if h['shutdown']:
        msg.info("Got shutdown signal = %s" % h['shutdown'])
        return False

    # Handle errors:
    #
    # These errors are just noted here; actual handling is in the HAL
    # file
    error = False

    # - E-Stop
    if h['estop']:  # Actual handling in HAL file
        if not state.get('error_seen',False):
            msg.warning("E-Stop")
        error = True

    # - Burner overheating
    if h['temp-burner'] > h['temp-burner-max']:
        if not state.get('error_seen',False):
            msg.warning("Burner overheating:  %.1f > %.1f" %
                        (h['temp-burner'], h['temp-burner-max']))
        error = True

    # - Autoclave overheating
    if h['temp-pot'] > h['temp-pot-max']:
        if not state.get('error_seen',False):
            msg.warning("Autoclave overheating:  %.1f > %.1f" %
                        (h['temp-pot'], h['temp-pot-max']))
        error = True

    # - Autoclave overpressure
    if h['pressure'] > h['pressure-max']:
        if not state.get('error_seen',False):
            msg.warning("Autoclave overpressure:  %.1f > %.1f" %
                        (h['pressure'], h['pressure-max']))
        error = True

    # # - Enable signal cleared
    # if not h['enable']:
    #     if not state.get('error_seen',False):
    #         msg.warning("Enable signal cleared")
    #     error = True

    # - Wrap up error processing
    if error:
        # Remember we saw an error and don't spew next round
        state['error_seen'] = True
        # Set error signal
        h['error'] = True
    else:
        if state.get('error_seen', False):
            msg.info("Error condition cleared; resuming")
        state['error_seen'] = False
        # Reset error signal
        h['error'] = False

    # Process state machine
    stage_name = current_stage()

    # - Enter idle state
    if not h['start'] and stage_name != 'idle':
        enter_stage('idle')

    # - Idle -> boil
    elif h['start'] and stage_name == 'idle':
        enter_stage('boil')

    # - Boil -> steam flush
    elif stage_name == 'boil' and stage_temp_reached():
        enter_stage('flush')

    # - Flush -> heating
    elif stage_name == 'flush' and stage_time_elapsed():
        enter_stage('heat')

    # - Heating -> sterilization
    elif stage_name == 'heat' and stage_temp_reached():
        enter_stage('ster')

    # - Sterilization -> cooldown
    elif stage_name == 'ster' and stage_time_elapsed():
        enter_stage('cool')

    # - Cooldown -> idle
    elif stage_name == 'cool' and stage_temp_reached():
        enter_stage('idle')

    # Update temp setting
    stage_name = current_stage()
    if stage_name not in timed_stages:
        h['temp-set'] = h['%s-temp-set' % stage_name]

    # Update indicators
    # - Process elapsed time
    h['time-elapsed'] = int(now - state["time-elapsed-start"])
    # - Stage elapsed time
    h['%s-time' % stage_name] = int(
        now - state.get('%s-time-start' % stage_name, now))
    # - Stage temperature
    if stage_name not in timed_stages:
        h['%s-temp' % stage_name] = h['temp-pot']

    return True

##################################################################
# Init

# Console logging
msg = Messages('Autoclave control')

# Read saved settings
config = Config()
saved_state = config.read_state()

# Set up component
h = hal.component("autoclave-control")

# Init pins and pin values
for name, hal_type, hal_dir, save in pin_data:
    h.newpin(name, hal_type, hal_dir)
    if hal_dir == hal.HAL_IN:
        # input pins don't need init
        continue
    if name in saved_state:
        # init from config file
        h[name] = saved_state.get(name)
        msg.info("Restored setting %s = %s" % (name,h[name]))

# Dict to persist state across cycles
state = dict()

# Start in idle stage
enter_stage('idle', init=True)

# Mark the component as 'ready'
msg.info("Initialized")
h.ready()

##################################################################
# Run
try:
    # Run forever
    while loop():
        pass
except KeyboardInterrupt:
    msg.info("Caught interrupt")
except Exception as e:
    msg.info("Caught exception:  %s" % e)
    msg.info(traceback.format_exc())
finally:
    # Shut things off and exit
    msg.info("Exiting")
    h['temp-set'] = 0.0
    h['valve-on'] = False
    sys.exit(0)
