#!/usr/bin/python
#
# Simulate temperatures in autoclave
#
# See sim-model.ods

import hal, time, sys, datetime, math, random
from autoclave import Config, Messages

msg = Messages('Autoclave sim-temp')

# Set up component
h = hal.component("autoclave-sim-temp", timer=100)

# Inputs:
# - Burner SSR duty signal, 0-100%
h.newpin("burner-duty", hal.HAL_FLOAT, hal.HAL_IN)
# - Pressure relief valve SSR signal
h.newpin("valve-on", hal.HAL_BIT, hal.HAL_IN)
# - Error
h.newpin("error", hal.HAL_BIT, hal.HAL_IN)
# - Exit
h.newpin("shutdown", hal.HAL_BIT, hal.HAL_IN)

# Outputs:  
# - Simulated burner temp
h.newpin("temp-burner-therm", hal.HAL_FLOAT, hal.HAL_OUT)
h.newpin("temp-burner-real", hal.HAL_FLOAT, hal.HAL_OUT)
# - Simulated pot temp
h.newpin("temp-pot-therm", hal.HAL_FLOAT, hal.HAL_OUT)
h.newpin("temp-pot-real", hal.HAL_FLOAT, hal.HAL_OUT)
# - Simulated pot pressure
h.newpin("pressure", hal.HAL_FLOAT, hal.HAL_OUT)

# Init values
config = Config()
saved_state = config.read_state()
temp_ext = 20.0

# Other settings
# - time increment
time_incr = 0.1 # seconds per update
# - time speed-up
speed_up = 1.0 # times
#speed_up = 6.0 # times
# - status update interval
status_interval = 60.0 # seconds
# - burner heat transfer delay distribution (totally arbitrary) (old to new)
burner_heat_transfer_weights = [ 0.3, 0.5, 0.2 ]
# - pot heat transfer delay distribution (totally arbitrary) (old to new)
pot_heat_transfer_weights = [
    0.02, 0.05, 0.1, 0.15, 0.18, 0.18, 0.15, 0.1, 0.05, 0.02]
# - pot water volume
water_volume_qts = 3.00 # qts.
# - burner power
burner_power_watts = 1200 # W; measured 10.3A on meter
# - burner heat capacity (totally arbitrary)
burner_heat_cap = 1450.0 # Cal./degree C
# - pot heat leakage
leakage_factor = 0.04/100 # % heat loss (to ambient) per second
# - Thermagon k
thermagon_k = 3.0 # W/(mK)
# - burner diameter
burner_dia_inches = 7.4 # in.
# - Thermagon thickness
thermagon_L_inches = 0.1 # in.
# - Thermagon max temperature
thermagon_temp_max = 200.0 # deg. C

# Conversions
# - Calories/second to Watts
cal_per_s_to_w = 4.1868
# - milliliters per quart
ml_per_qt = 946.353
# - meters per inch
m_per_in = 0.0254

# Thermagon conductivity calculations
# k = Q * L/(A * d_T); Q = k * A * d_T / L
# - burner area
burner_dia = burner_dia_inches * m_per_in # m
burner_A = math.pi * (burner_dia)**2 # m^2
# - Thermagon thickness
thermagon_L = thermagon_L_inches * m_per_in # m
# - Burner heat transfer factor:  heat_transfer * temp_delta = transfer in W
transfer_factor = thermagon_k * burner_A / thermagon_L
# - FIXME fudge this
transfer_factor *= 0.13

# Other calculations
# - Burner power
burner_power = burner_power_watts / cal_per_s_to_w # cal/s
# - Pot water volume
water_volume = water_volume_qts * ml_per_qt # ml

# Print a bunch of stats
msg.info("burner_power = %.1f cal/s" % burner_power)

# Mark the component as 'ready'
msg.info("Initialized")
h.ready()

# State variables
elapsed = 0.0
temp_burner = h['temp-burner-therm']
temp_pot = h['temp-pot-therm']
burner_heat = 0.0
pot_heat_transfer_in = 0.0
pot_heat = 0.0
pot_heat_old = 0.0
error_seen = False

try:
    while True:
        time.sleep(time_incr)
        elapsed += time_incr

        # Take one sample for consistency
        # - Autoclave comp inputs
        burner_duty = h['burner-duty']
        valve_on = h['valve-on']
        # - Error
        error = h['error']
        # - Shutdown
        shutdown = h['shutdown']

        # Exit
        if shutdown:
            msg.info("Got shutdown signal")
            break

        # Do some sanity checks
        err = 0
        if error and not error_seen:
            msg.info("Error:  HAL error signal asserted")
            err = 1
            error_seen = True
        if temp_burner > thermagon_temp_max and not error_seen:
            msg.info("Error:  Thermagon max temp exceeded:  %.1f > %.1f" %
                     (temp_burner, thermagon_temp_max))
            err = 1
            error_seen = True
        if error_seen and not error:
            msg.info("Error condition cleared")
            error_seen = False

        # Calculations
        # - Time passed since last update
        update_time = time_incr * speed_up
        # - Calories added by burner
        burner_calories = burner_power * burner_duty * update_time
        # - Burner total heat and temperature
        burner_heat_old = burner_heat
        burner_heat = (burner_heat_old + burner_calories
                       - pot_heat_transfer_in) # cal.
        temp_burner = temp_ext + burner_heat / burner_heat_cap # deg. C
        # - Calories added to pot by heat transfer
        t_delta = temp_burner - temp_pot # deg. C
        pot_heat_transfer_in = (
            t_delta * transfer_factor / cal_per_s_to_w * update_time) # cal.
        # Heat leakage from pot to outside
        leakage = pot_heat * (leakage_factor * update_time) # cal.
        # New pot heat
        pot_heat_old = pot_heat # cal.
        pot_heat = pot_heat_old + pot_heat_transfer_in - leakage # cal.
        # New pot temperature
        temp_pot = temp_ext + pot_heat/water_volume
        # If valve is open, let off steam
        if valve_on and temp_pot > 100.0:
            pot_heat -= (temp_pot - 100.0) * water_volume # cal. > 100 deg.
            temp_pot = 100.0 # deg. C
        # New pot pressure; assume linear increase 0-15PSI over 100-121 deg. C
        pressure = max(temp_pot - 100, 0.0) * 15/21 # PSI

        # Output values
        # - Add +/- 0.2 deg. sensor error on temp sensors
        h['temp-pot-real'] = temp_pot
        h['temp-pot-therm'] = temp_pot + random.triangular(-0.2,0.2,0)
        h['temp-burner-real'] = temp_burner
        h['temp-burner-therm'] = temp_burner + random.triangular(-0.2,0.2,0)
        h['pressure'] = pressure

        # Periodically print updates
        if elapsed % status_interval < time_incr:
            msg.info("Status:  pot=%.1f; burner=%.1f; avg. burner duty=%.1f%%" %
                    (temp_pot, temp_burner,
                     burner_duty*100))
            # Simulation debugging
            # msg.info("   burner_calories %.1f" % (
            #     burner_calories))
            # msg.info("   burner_heat %.1f" % (
            #     burner_heat))
            # msg.info("   temp_burner %.1f" % (
            #     temp_burner))
            # msg.info("   t_delta %.1f" % (
            #     t_delta))
            # msg.info("   pot_heat_transfer_in %.1f" % (
            #     pot_heat_transfer_in))
            # msg.info("   leakage %.1f" % (
            #     leakage))
            # msg.info("   pot_heat %.1f" % (
            #     pot_heat))
            # msg.info("   temp_pot %.1f" % (
            #     temp_pot))
            # msg.info("   pressure %.1f" % (
            #     pressure))

except KeyboardInterrupt:
    msg.info("Caught interrupt; exiting")
    sys.exit(0)

msg.info("Exiting")
sys.exit(0)
